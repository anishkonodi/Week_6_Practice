Oops
class 
object
constructor
inheritance
polymorphism
AccessSpecifiers
Abstraction
Encapsulation
this keyword
super keyword
static keyword
final keyword
1. declare variable -we cant change the value
2. declare with method --- we canot override
3. declare final we cannot extends



Class: A class is a blueprint for creating objects that defines a set of
 attributes (data) and methods (functions) that an object of that class can have.

Object: An object is an instance of a class that has specific values for 
its attributes and can execute the methods defined in the class.

Constructor: A constructor is a special method that is called when an object 
of a class is created. It initializes the attributes of the object to specific values.

Inheritance: Inheritance is a mechanism that allows a new class (the derived class)
 to be based on an existing class (the base class), inheriting all of its attributes
 and methods. This enables code reuse and facilitates the creation of new classes 
with similar functionality.

Polymorphism: Polymorphism is the ability of objects of different classes to be used
 interchangeably, allowing a single method to have multiple implementations. It is achieved through method overloading and method overriding.

Access Specifiers: Access specifiers (public, private, and protected) are keywords 
that specify the visibility and accessibility of class attributes and methods. 
They control how objects of the class can interact with and modify its attributes and methods.

Abstraction: Abstraction is the process of hiding the implementation details of a class 
and exposing only the essential features and functionalities to the user. It allows for 
the creation of simpler and more manageable code.

Encapsulation: Encapsulation is the practice of grouping related attributes and methods 
within a class and making them accessible only through well-defined interfaces.
 This protects the integrity of the data and provides greater control over the behavior of the object.

"this" keyword: "this" is a keyword that refers to the current object instance in a class.
 It is often used to distinguish between class attributes and local variables with the same name.

"super" keyword: "super" is a keyword that refers to the parent class of a derived class. 
It is used to call methods and access attributes of the parent class.

"static" keyword: "static" is a keyword that is used to declare class-level attributes and 
methods that belong to the class itself rather than individual objects of the class.

"final" keyword: "final" is a keyword that is used to create constants (variables whose 
value cannot be changed) or to prevent a class, method, or variable from being modified or extended.






Exeption handling

checked exeption : compile time exeption
we need to declare 
ex:IO,SQL,ClassNotFound
unchecked exception : run time exeption
ex:Arithmetic
ArrayIndexOut
NullPointer
NumberFormat


we can handle the exeption using try and catch block.


Custom exception:
create our own Exception

1. class extends exception
2.constructor
3.super()

class 
method throws Exception{

logic
throw new Exception("some exception")



class EHDemo{
  public static void main(String args[]){
    System.out.println("gfdgd");
   String str="admin@123";
    try{
      int num=Integer.parseInt(str);
    }
    catch(NumberFormatException e){
      System.out.println(e);
    }
    
    System.out.println(str.length());
    
    
  }
}






[2:51 pm] Lalitha Ujjaneni
    

Sr. no.
Basis of Differences
throw
throws

1.
Definition
Java throw keyword is used throw an exception explicitly in the code, inside the function or the block of code.
Java throws keyword is used in the method signature to declare an exception which might be thrown by the function while the execution of the code.


​[2:51 pm] Lalitha Ujjaneni
    

nternal implementation
We are allowed to throw only one exception at a time i.e. we cannot throw multiple exceptions.
We can declare multiple exceptions using throws keyword that can be thrown by the method. For example, main() throws IOException, SQLException.


​[2:51 pm] Lalitha Ujjaneni
    

throw is used within the method.
throws is used with the method signature.


​[2:52 pm] Lalitha Ujjaneni
    

The throw keyword is followed by an instance of Exception to be thrown.
The throws keyword is followed by class names of Exceptions to be thrown.



   

1. Bank Account: Create a class called BankAccount that simulates a bank account. 
The class should have methods to deposit, withdraw, and check the balance. 
You can also create a custom exception called InsufficientFundsException to 
throw when a withdrawal is attempted with insufficient funds.
 
2. Shapes: Create classes for different shapes (e.g. Circle, Rectangle, Triangle) 
that all extend a base Shape class. Each class should have methods to calculate 
the area and perimeter of the shape. You can also create a custom exception called
 InvalidDimensionsException to throw when the dimensions of a shape are invalid.
 
3. Online Store: Create a class called Product that represents a product in an online store,
 and a class called Store that represents the store. The store class should have methods to add, 
remove, and display products. You can also create a custom exception called ProductNotFoundException 
to throw when a product is not found in the store.
 
4. Employee Management: Create a class called Employee that represents an employee and 
a class called Company that represents a company. The company class should have methods to add, 
remove, and display employees. You can also create a custom exception called InvalidSalaryException
 to throw when an employee's salary is below the minimum wage.
 
5. Calculator: Create a class called Calculator that can perform basic arithmetic operations and 
a custom exception called InvalidExpressionException that should be thrown when the expression to
 be evaluated is invalid.